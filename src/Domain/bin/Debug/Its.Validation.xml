<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Its.Validation</name>
    </assembly>
    <members>
        <member name="T:Its.Recipes.MaybeExtensions">
            <summary>
                Supports chaining of expressions when intermediate values may be null, to support a fluent API style using common .NET types.
            </summary>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.Else``1(Its.Recipes.Maybe{``0},System.Func{``0})">
            <summary>
                Specifies a function that will be evaluated if the source <see cref="T:Its.Recipes.Maybe`1" /> has no value.
            </summary>
            <typeparam name="T">
                The type held by the <see cref="T:Its.Recipes.Maybe`1" />.
            </typeparam>
            <param name="maybe">The source maybe.</param>
            <param name="otherValue">The value to be returned if the <see cref="T:Its.Recipes.Maybe`1" /> has no value.</param>
            <returns>
                The value of the Maybe if it has a value; otherwise, the value returned by <paramref name="otherValue" />.
            </returns>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.Else``1(Its.Recipes.Maybe{``0},System.Func{Its.Recipes.Maybe{``0}})">
            <summary>
                Specifies a function that will be evaluated if the source <see cref="T:Its.Recipes.Maybe`1" /> has no value.
            </summary>
            <typeparam name="T">
                The type held by the <see cref="T:Its.Recipes.Maybe`1" />.
            </typeparam>
            <param name="maybe">The source maybe.</param>
            <param name="other">The value to be returned if the <see cref="T:Its.Recipes.Maybe`1" /> has no value.</param>
            <returns>
                The value of the Maybe if it has a value; otherwise, the value returned by <paramref name="other" />.
            </returns>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.Else``1(Its.Recipes.Maybe{Its.Recipes.Maybe{``0}},System.Func{``0})">
            <summary>
                Specifies a function that will be evaluated if the source <see cref="T:Its.Recipes.Maybe`1" /> has no value.
            </summary>
            <typeparam name="T">
                The type held by the <see cref="T:Its.Recipes.Maybe`1" />.
            </typeparam>
            <param name="maybe">The source maybe.</param>
            <param name="otherValue">The value to be returned if the <see cref="T:Its.Recipes.Maybe`1" /> has no value.</param>
            <returns>
                The value of the Maybe if it has a value; otherwise, the value returned by <paramref name="otherValue" />.
            </returns>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.Else``1(Its.Recipes.Maybe{Its.Recipes.Maybe{Its.Recipes.Maybe{``0}}},System.Func{``0})">
            <summary>
                Specifies a function that will be evaluated if the source <see cref="T:Its.Recipes.Maybe`1" /> has no value.
            </summary>
            <typeparam name="T">
                The type held by the <see cref="T:Its.Recipes.Maybe`1" />.
            </typeparam>
            <param name="maybe">The source maybe.</param>
            <param name="otherValue">The value to be returned if the <see cref="T:Its.Recipes.Maybe`1" /> has no value.</param>
            <returns>
                The value of the Maybe if it has a value; otherwise, the value returned by <paramref name="otherValue" />.
            </returns>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.Else``1(Its.Recipes.Maybe{Its.Recipes.Maybe{Its.Recipes.Maybe{Its.Recipes.Maybe{``0}}}},System.Func{``0})">
            <summary>
                Specifies a function that will be evaluated if the source <see cref="T:Its.Recipes.Maybe`1" /> has no value.
            </summary>
            <typeparam name="T">
                The type held by the <see cref="T:Its.Recipes.Maybe`1" />.
            </typeparam>
            <param name="maybe">The source maybe.</param>
            <param name="otherValue">The value to be returned if the <see cref="T:Its.Recipes.Maybe`1" /> has no value.</param>
            <returns>
                The value of the Maybe if it has a value; otherwise, the value returned by <paramref name="otherValue" />.
            </returns>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.ElseDefault``1(Its.Recipes.Maybe{``0})">
            <summary>
            Returns the default value for <typeparamref name="T" /> if the <see cref="T:Its.Recipes.Maybe`1" /> has no value.
            </summary>
            <typeparam name="T">
                The type held by the <see cref="T:Its.Recipes.Maybe`1" />.
            </typeparam>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.ElseDefault``1(Its.Recipes.Maybe{Its.Recipes.Maybe{``0}})">
            <summary>
            Returns the default value for <typeparamref name="T" /> if the <see cref="T:Its.Recipes.Maybe`1" /> has no value.
            </summary>
            <typeparam name="T">
                The type held by the <see cref="T:Its.Recipes.Maybe`1" />.
            </typeparam>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.ElseDefault``1(Its.Recipes.Maybe{Its.Recipes.Maybe{Its.Recipes.Maybe{``0}}})">
            <summary>
            Returns the default value for <typeparamref name="T" /> if the <see cref="T:Its.Recipes.Maybe`1" /> has no value.
            </summary>
            <typeparam name="T">
                The type held by the <see cref="T:Its.Recipes.Maybe`1" />.
            </typeparam>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.ElseDefault``1(Its.Recipes.Maybe{Its.Recipes.Maybe{Its.Recipes.Maybe{Its.Recipes.Maybe{``0}}}})">
            <summary>
            Returns the default value for <typeparamref name="T" /> if the <see cref="T:Its.Recipes.Maybe`1" /> has no value.
            </summary>
            <typeparam name="T">
                The type held by the <see cref="T:Its.Recipes.Maybe`1" />.
            </typeparam>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.ElseNull``1(Its.Recipes.Maybe{``0})">
            <summary>
            Returns null if the source has no value.
            </summary>
            <typeparam name="T">The type held by the <see cref="T:Its.Recipes.Maybe`1" />.</typeparam>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.ElseDo``1(Its.Recipes.Maybe{``0},System.Action)">
            <summary>
            Performs an action if the <see cref="T:Its.Recipes.Maybe`1" /> has no value.
            </summary>
            <typeparam name="T">
                The type held by the <see cref="T:Its.Recipes.Maybe`1" />.
            </typeparam>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.IfContains``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
                If the dictionary contains a value for a specified key, executes an action passing the corresponding value.
            </summary>
            <typeparam name="TKey"> The type of the key. </typeparam>
            <typeparam name="TValue"> The type of the value. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="key"> The key. </param>
            <exception cref="T:System.ArgumentNullException">dictionary</exception>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.And``1(Its.Recipes.Maybe{``0})">
            <summary>
            Allows two maybes to be combined so that the resulting maybe has its value transformed by the second if and only if the first has a value.
            </summary>
            <typeparam name="T1">The type of the <see cref="T:Its.Recipes.Maybe`1" />.</typeparam>
            <param name="first">The first maybe.</param>
            <returns></returns>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.IfHas``1(System.Object,System.Func{System.Object,``0})">
            <summary>
            Attempts to retrieve a value dynamically.
            </summary>
            <typeparam name="T">The type of the value expected to be returned.</typeparam>
            <param name="source">The source object.</param>
            <param name="getValue">A delegate that attempts to return a value via a dynamic invocation on the source object.</param>
            <remarks>This method will not cast the result value to <typeparamref name="T" />. If the returned value is not of this type, then a negative <see cref="T:Its.Recipes.Maybe`1" /> will be returned.</remarks>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.IfNotNull``1(``0)">
            <summary>
            Creates a <see cref="T:Its.Recipes.Maybe`1" /> that has a value if <paramref name="source" /> is not null. 
            </summary>
            <typeparam name="T">The type of the instance wrapped by the <see cref="T:Its.Recipes.Maybe`1" />.</typeparam>
            <param name="source">The source instance, which may be null.</param>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.IfNotNull``1(Its.Recipes.Maybe{``0})">
            <summary>
            Creates a <see cref="T:Its.Recipes.Maybe`1" /> that has a value if <paramref name="source" /> has a value. 
            </summary>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.IfNotNull``1(System.Nullable{``0})">
            <summary>
            Creates a <see cref="T:Its.Recipes.Maybe`1" /> that has a value if <paramref name="source" /> is not null. 
            </summary>
            <typeparam name="T">The type of the instance wrapped by the <see cref="T:Its.Recipes.Maybe`1" />.</typeparam>
            <param name="source">The source instance, which may be null.</param>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.IfNotNullOrEmptyOrWhitespace(System.String)">
            <summary>
            Creates a <see cref="T:Its.Recipes.Maybe`1" /> that has a value if <paramref name="source" /> is not null, empty, or entirely whitespace. 
            </summary>
            <param name="source">The string.</param>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.IfTypeIs``1(System.Object)">
            <summary>
            Creates a <see cref="T:Its.Recipes.Maybe`1" /> that has a value if <paramref name="source" /> is assignable to type <typeparamref name="T" />. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.OrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns either the <paramref name="source" /> or, if it is null, an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequence.
            </summary>
            <typeparam name="T"> The type of the objects in the sequence. </typeparam>
            <param name="source"> The source sequence. </param>
            <returns> The source sequence or, if it is null, an empty sequence. </returns>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.Out``2(``0,Its.Recipes.TryGetOutParameter{``0,``1})">
            <summary>
            Attempts to get the value of a Try* method with an out parameter, for example <see cref="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)" /> or <see cref="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)" />.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <typeparam name="TOut">The type the out parameter.</typeparam>
            <param name="source">The source object exposing the Try* method.</param>
            <param name="tryTryGetValue">A delegate to call the Try* method.</param>
            <returns></returns>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.Then``2(Its.Recipes.Maybe{``0},System.Func{``0,``1})">
            <summary>
            Specifies the result of a <see cref="T:Its.Recipes.Maybe`1" /> if the <see cref="T:Its.Recipes.Maybe`1" /> has a value.
            </summary>
            <typeparam name="TIn">The type of source object.</typeparam>
            <typeparam name="TOut">The type of result.</typeparam>
            <param name="maybe">The maybe.</param>
            <param name="getValue">A delegate to get the value from the source object.</param>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.ThenDo``1(Its.Recipes.Maybe{``0},System.Action{``0})">
            <summary>
            Performs an action if the <see cref="T:Its.Recipes.Maybe`1" /> has a value.
            </summary>
            <typeparam name="T">
                The type held by the <see cref="T:Its.Recipes.Maybe`1" />.
            </typeparam>
        </member>
        <member name="M:Its.Recipes.MaybeExtensions.Try``2(``0,System.Func{``0,``1},System.Func{System.Exception,System.Boolean})">
            <summary>
            Tries to call the specified method and catches exceptions if they occur.
            </summary>
            <typeparam name="TIn">The type of source object.</typeparam>
            <typeparam name="TOut">The type of result.</typeparam>
            <param name="source">The source object.</param>
            <param name="getValue">A delegate to get the value from the source object.</param>
            <param name="ignore">A predicate to determine whether the exception should be ignored. If this is not specified, all exceptions are ignored. If it is specified and an exception is thrown that matches the predicate, the exception is ignored and a <see cref="T:Its.Recipes.Maybe`1" /> having no value is returned. If it is specified and an exception is thrown that does not match the predicate, the exception is allowed to propagate.</param>
            <returns></returns>
        </member>
        <member name="T:Its.Recipes.Maybe`1">
            <summary>
            Represents an object that may or may not contain a value, allowing optional chained results to be specified for both possibilities.
            </summary>
            <typeparam name="T">The type of the possible value.</typeparam>
        </member>
        <member name="M:Its.Recipes.Maybe`1.Yes(`0)">
            <summary>
            Returns a <see cref="T:Its.Recipes.Maybe`1" /> that contains a value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Its.Recipes.Maybe`1.No">
            <summary>
            Returns a <see cref="T:Its.Recipes.Maybe`1" /> that does not contain a value.
            </summary>
        </member>
        <member name="P:Its.Recipes.Maybe`1.Value">
            <summary>
            Gets the value contained by the <see cref="T:Its.Recipes.Maybe`1" />.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Its.Recipes.Maybe`1.HasValue">
            <summary>
            Gets a value indicating whether this instance has a value.
            </summary>
            <value>
              <c>true</c> if this instance has value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Its.Recipes.TryGetOutParameter`2">
            <summary>
            A delegate used to return an out parameter from a Try* method that indicates success via a boolean return value.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <typeparam name="TOut">The type of the out parameter.</typeparam>
            <param name="source">The source.</param>
            <param name="outValue">The out parameter's value.</param>
            <returns>true if the out parameter was set; otherwise, false.</returns>
        </member>
        <member name="T:Its.Recipes.Unit">
            <summary>
            A type representing a void return type.
            </summary>
        </member>
        <member name="F:Its.Recipes.Unit.Default">
            <summary>
            The default instance.
            </summary>
        </member>
        <member name="T:Its.Validation.Configuration.DataAnnotationsExtensions">
            <summary>
            Provides DataAnnotations support.
            </summary>
        </member>
        <member name="M:Its.Validation.Configuration.DataAnnotationsExtensions.ConfigureFromAttributes``1(Its.Validation.ValidationPlan{``0})">
            <summary>
              Adds validatiom rules for any DataAnnotations attributes on the validated type.
            </summary>
            <typeparam name="T"> The type to be validated. </typeparam>
            <param name="plan"> The validation plan to which to add DataAnnotations validation rules. </param>
            <returns> </returns>
        </member>
        <member name="T:Its.Validation.Configuration.Validate">
            <summary>
              Provides methods for creating and configuring validation rules.
            </summary>
        </member>
        <member name="M:Its.Validation.Configuration.Validate.As``1(``0,System.String)">
            <summary>
              Stores a parameter value at rule evaluation time and designates a name for that parameter so that it can be accessed later.
            </summary>
            <typeparam name="TParam"> The type of the param. </typeparam>
            <param name="value"> The value of the parameter. </param>
            <param name="parameterName"> The name by which the parameter will be referenced, for example in validation message format strings. </param>
            <returns> The parameter. </returns>
            <remarks>
              This operator is used to store the value of a parameter within a validation rule so that it can be evaluated later, generally for the purpose of including it in a validation error message. This does not affect the evaluation of the rule itself.
            </remarks>
        </member>
        <member name="M:Its.Validation.Configuration.Validate.As``2(``0,System.String,System.Func{``0,``1})">
            <summary>
              Stores a converted parameter value at rule evaluation time and designates a name for that parameter so that it can be accessed later.
            </summary>
            <typeparam name="TEvaluated"> The type of the evaluated. </typeparam>
            <typeparam name="TParam"> The type of the param. </typeparam>
            <param name="value"> The value of the parameter. </param>
            <param name="parameterName"> The name by which the parameter will be referenced, for example in validation message format strings. </param>
            <param name="convert"> Converts the parameter value to be stored for later evaluation. </param>
            <returns> The parameter. </returns>
            <remarks>
              This operator is used to store the value of a parameter within a validation rule so that it can be evaluated later, generally for the purpose of including it in a validation error message. This does not affect the evaluation of the rule itself.
            </remarks>
        </member>
        <member name="M:Its.Validation.Configuration.Validate.Every``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
              Checks every item in the list against the specified <paramref name="condition" /> .
            </summary>
            <typeparam name="TTarget"> The type of the target. </typeparam>
            <param name="list"> The list of targets. </param>
            <param name="condition"> The condition to validate. </param>
            <returns> True if <paramref name="condition" /> evaluates to true for every target in the list; otherwise, false. </returns>
            <remarks>
              This operator is provided to supplement the <see cref="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" /> operator for validations. Whereas <see
               cref="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" /> will stop iterating upon the first false result, <see cref="M:Its.Validation.Configuration.Validate.Every``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" /> will evaluate each item in the list once, to provide a complete validation report.
            </remarks>
        </member>
        <member name="M:Its.Validation.Configuration.Validate.Every``1(System.Collections.Generic.IEnumerable{``0},Its.Validation.IValidationRule{``0})">
            <summary>
              Validates every item in a sequence.
            </summary>
            <typeparam name="TTarget"> The type of the target. </typeparam>
            <param name="list"> A sequence of items of type <typeparamref name="TTarget" /> to be validated. </param>
            <param name="rule"> The rule to validate each item against. </param>
            <remarks>
              This method is provided as an alternative to <see cref="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" /> , which will stop evaluating upon finding the first false result. <see
               cref="M:Its.Validation.Configuration.Validate.Every``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" /> will force evaluation of the entire sequence and return all results.
            </remarks>
            <returns> </returns>
        </member>
        <member name="M:Its.Validation.Configuration.Validate.ForMember``1(Its.Validation.ValidationRule{``0},System.String)">
            <summary>
              Associates a member name with a validation rule.
            </summary>
            <typeparam name="TTarget"> The type of the target. </typeparam>
            <param name="rule"> The rule. </param>
            <param name="memberPath"> A member to which the validation rule is associated. </param>
            <returns> A clone of the source validation rule. </returns>
            <remarks>
              This need not match the actual object model. It is a mechanism for grouping rules and does not affect the execution or evaluation of the rules in any way.
            </remarks>
        </member>
        <member name="M:Its.Validation.Configuration.Validate.ForMember``2(Its.Validation.ValidationRule{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
              Associates a member name with a validation rule.
            </summary>
            <typeparam name="TTarget"> The type of the target. </typeparam>
            <typeparam name="TReturn"> The type of the member. </typeparam>
            <param name="rule"> The rule. </param>
            <param name="expression"> An expression identifying the member to which the validation rule is associated. </param>
            <returns> A clone of the source validation rule. </returns>
        </member>
        <member name="M:Its.Validation.Configuration.Validate.That``1(System.Func{``0,System.Boolean})">
            <summary>
              Builds a <see cref="T:Its.Validation.ValidationRule`1" /> .
            </summary>
            <typeparam name="TTarget"> The type of the validation target against which the rule can be checked. </typeparam>
            <param name="condition"> The condition. </param>
            <returns> A <see cref="T:Its.Validation.ValidationRule`1" /> for the specified condition. </returns>
        </member>
        <member name="M:Its.Validation.Configuration.Validate.When``1(Its.Validation.ValidationRule{``0},Its.Validation.IValidationRule{``0}[])">
            <summary>
              Declares a precondition, which must evaluate to true before the <paramref name="rule" /> will be evaluated.
            </summary>
            <typeparam name="TTarget"> The type of the target. </typeparam>
            <param name="rule"> The rule. </param>
            <param name="preconditions"> The preconditions. </param>
            <returns> A clone of the source validation rule. </returns>
        </member>
        <member name="M:Its.Validation.Configuration.Validate.When``1(Its.Validation.ValidationRule{``0},System.Func{``0,System.Boolean})">
            <summary>
              Declares a precondition, which must evaluate to true before the <paramref name="rule" /> will be evaluated.
            </summary>
            <typeparam name="TTarget"> The type of the target. </typeparam>
            <param name="rule"> The rule. </param>
            <param name="precondition"> The precondition. </param>
            <returns> A clone of the source validation rule. </returns>
            <remarks>
              When the precondition fails, it will not generate a <see cref="T:Its.Validation.FailedEvaluation" /> .
            </remarks>
        </member>
        <member name="M:Its.Validation.Configuration.Validate.WithErrorCode``1(Its.Validation.ValidationRule{``0},System.String)">
            <summary>
              Associates an error code with a validation rule.
            </summary>
            <typeparam name="TTarget"> The type of the target. </typeparam>
            <param name="rule"> The rule. </param>
            <param name="errorCode"> The error code. </param>
            <returns> A clone of the source validation rule. </returns>
        </member>
        <member name="M:Its.Validation.Configuration.Validate.WithMessage``1(Its.Validation.ValidationRule{``0},System.String)">
            <summary>
              Assigns a message to a validation rule, which may be used for both failures and successes.
            </summary>
            <typeparam name="TTarget"> The type of the object being validated. </typeparam>
            <param name="rule"> The rule. </param>
            <param name="message"> The message. </param>
            <returns> A clone of validation rule. </returns>
        </member>
        <member name="M:Its.Validation.Configuration.Validate.WithErrorMessage``1(Its.Validation.ValidationRule{``0},System.String)">
            <summary>
              Assigns a message to the validation rule that will be displayed when the rule fails.
            </summary>
            <typeparam name="TTarget"> The type of the object being validated. </typeparam>
            <param name="rule"> The rule. </param>
            <param name="message"> The message. </param>
            <returns> A clone of the source validation rule. </returns>
        </member>
        <member name="M:Its.Validation.Configuration.Validate.WithErrorMessage``1(Its.Validation.ValidationRule{``0},System.Func{Its.Validation.FailedEvaluation,System.String})">
            <summary>
              Provides an error message to be shown when the rule fails.
            </summary>
            <typeparam name="TTarget"> The type of the object being validated. </typeparam>
            <param name="rule"> The rule. </param>
            <param name="buildMessage"> A function that returns a message appropriate to the validation failure. </param>
            <returns> </returns>
        </member>
        <member name="M:Its.Validation.Configuration.Validate.WithErrorMessage``1(Its.Validation.ValidationRule{``0},System.Func{Its.Validation.FailedEvaluation,``0,System.String})">
            <summary>
            Provides an error message to be shown when the rule fails.
            </summary>
            <typeparam name="TTarget">The type of the object being validated.</typeparam>
            <param name="rule">The rule.</param>
            <param name="buildMessage">A function that returns a message appropriate to the validation failure.</param>
            <returns></returns>
        </member>
        <member name="M:Its.Validation.Configuration.Validate.WithSuccessMessage``1(Its.Validation.ValidationRule{``0},System.String)">
            <summary>
              Assigns a message to the validation rule that will be displayed when the rule passes.
            </summary>
            <typeparam name="TTarget"> The type of the object being validated. </typeparam>
            <param name="rule"> The rule. </param>
            <param name="message"> The message. </param>
            <returns> A clone of the source validation rule. </returns>
        </member>
        <member name="M:Its.Validation.Configuration.Validate.WithSuccessMessage``1(Its.Validation.ValidationRule{``0},System.Func{Its.Validation.SuccessfulEvaluation,System.String})">
            <summary>
              Assigns a message to the validation rule that will be displayed when the rule passes.
            </summary>
            <typeparam name="TTarget"> The type of the object being validated. </typeparam>
            <param name="rule"> The rule. </param>
            <param name="buildMessage"> A function that returns a message for a <see cref="T:Its.Validation.SuccessfulEvaluation" /> . </param>
            <returns> A clone of the source validation rule. </returns>
        </member>
        <member name="M:Its.Validation.Configuration.Validate.WithSuccessMessage``1(Its.Validation.ValidationRule{``0},System.Func{Its.Validation.SuccessfulEvaluation,``0,System.String})">
            <summary>
            Assigns a message to the validation rule that will be displayed when the rule passes.
            </summary>
            <typeparam name="TTarget">The type of the object being validated.</typeparam>
            <param name="rule">The rule.</param>
            <param name="buildMessage">A function that returns a message for a <see cref="T:Its.Validation.SuccessfulEvaluation" />.</param>
            <returns>
            A clone of the source validation rule.
            </returns>
        </member>
        <member name="M:Its.Validation.Configuration.Validate.With``2(Its.Validation.ValidationRule{``0},``1)">
            <summary>
              Adds a dynamic property to a rule, which will be copied to any <see cref="T:Its.Validation.FailedEvaluation" /> generated by the rule.
            </summary>
            <typeparam name="TTarget"> The <see cref="T:System.Type" /> of the target. </typeparam>
            <typeparam name="T"> The <see cref="T:System.Type" /> of the dynamic property. </typeparam>
            <param name="rule"> The rule. </param>
            <param name="value"> The value. </param>
            <returns> A clone of the source validation rule. </returns>
        </member>
        <member name="M:Its.Validation.Configuration.Validate.With``2(Its.Validation.ValidationPlan{``0},``1)">
            <summary>
              Adds a dynamic property to a rule, which will be copied to any <see cref="T:Its.Validation.FailedEvaluation" /> generated by the rule.
            </summary>
            <typeparam name="TTarget"> The <see cref="T:System.Type" /> of the target. </typeparam>
            <typeparam name="T"> The <see cref="T:System.Type" /> of the dynamic property. </typeparam>
            <param name="plan"> The validation plan. </param>
            <param name="value"> The value. </param>
            <returns> A clone of the source validation rule. </returns>
        </member>
        <member name="M:Its.Validation.Configuration.ValidationRuleExtensions.Handle``2(Its.Validation.ValidationRule{``1},System.Action{``0})">
            <summary>
              Prevents exceptions of the specified type from being thrown from executions of the specified rule, instead passing them to a handler <see
               cref="T:System.Action`1" /> .
            </summary>
            <typeparam name="TException"> The exception type to handle. </typeparam>
            <typeparam name="TTarget"> The type of the target. </typeparam>
            <param name="rule"> The rule. </param>
            <param name="getDetails"> A handler which will be called if an exception of <typeparamref name="TException" /> is thrown by the rule. </param>
            <returns> </returns>
        </member>
        <member name="M:Its.Validation.Configuration.ValidationRuleExtensions.Execute``1(Its.Validation.IValidationRule{``0},``0)">
            <summary>
              Executes the specified rule and returns a <see cref="T:Its.Validation.ValidationReport" /> .
            </summary>
            <typeparam name="TTarget"> The type of the object to be validated. </typeparam>
            <param name="rule"> The rule to execute. </param>
            <param name="target"> The object to be validated. </param>
            <returns> </returns>
        </member>
        <member name="M:Its.Validation.Configuration.ValidationRuleExtensions.Preconditions``1(Its.Validation.IValidationRule{``0})">
            <summary>
              Returns the direct preconditions of the rule.
            </summary>
        </member>
        <member name="T:Its.Validation.DebugMessageGenerator">
            <summary>
              Builds messages describing <see cref="T:Its.Validation.FailedEvaluation" /> s.
            </summary>
        </member>
        <member name="F:Its.Validation.DebugMessageGenerator.messages">
            <summary>
              Stores error codes and corresponding messages
            </summary>
        </member>
        <member name="M:Its.Validation.DebugMessageGenerator.GetMessage(Its.Validation.RuleEvaluation)">
            <summary>
              Gets the message for the specified <see cref="T:Its.Validation.RuleEvaluation" /> .
            </summary>
            <param name="evaluation"> The <see cref="T:Its.Validation.RuleEvaluation" /> . </param>
            <returns> A validation message <see cref="T:System.String" /> . </returns>
        </member>
        <member name="M:Its.Validation.DebugMessageGenerator.BuildMessage(Its.Validation.RuleEvaluation)">
            <summary>
              Builds a message describing the <see cref="T:Its.Validation.RuleEvaluation" /> .
            </summary>
            <param name="evaluation"> The rule evaluation for which to build a message. </param>
            <returns> A message describing the evaluation. </returns>
        </member>
        <member name="T:Its.Validation.DefaultMessageGenerator">
            <summary>
              Builds messages describing <see cref="T:Its.Validation.RuleEvaluation" /> s.
            </summary>
        </member>
        <member name="M:Its.Validation.DefaultMessageGenerator.GetMessage(Its.Validation.RuleEvaluation)">
            <summary>
              Gets the message for the specified <see cref="T:Its.Validation.RuleEvaluation" /> .
            </summary>
            <param name="evaluation"> The <see cref="T:Its.Validation.RuleEvaluation" /> . </param>
            <returns> A validation failure message <see cref="T:System.String" /> . </returns>
        </member>
        <member name="T:Its.Validation.ErrorCode`1">
            <summary>
              A validation error code to be associated with a validation rule.
            </summary>
            <typeparam name="T"> The <see cref="T:System.Type" /> of the error code. </typeparam>
        </member>
        <member name="M:Its.Validation.ErrorCode`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Its.Validation.ErrorCode`1"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="P:Its.Validation.ErrorCode`1.Value">
            <summary>
            Gets or sets the error code value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Its.Validation.ErrorCode`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Its.Validation.AsyncValidationRule`1.Check(`0,Its.Validation.ValidationScope)">
            <summary>
              Determines (synchronously) whether the specified target is valid.
            </summary>
            <param name="target"> The object to be validated. </param>
            <param name="scope"> The <see cref="T:Its.Validation.ValidationScope" /> in which to perform the validation. </param>
            <returns> <c>true</c> if the specified target is valid; otherwise, <c>false</c> . </returns>
        </member>
        <member name="T:Its.Validation.MemberPath">
            <summary>
            Describes the dot-notation path through an object graph to a specific member.
            </summary>
        </member>
        <member name="M:Its.Validation.MemberPath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Its.Validation.MemberPath"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Its.Validation.MemberPath.Value">
            <summary>
            Gets the member path value.
            </summary>
        </member>
        <member name="M:Its.Validation.MemberPath.FromExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Determines a member path given an Expression.
            </summary>
        </member>
        <member name="P:Its.Validation.MessageGenerator.Current">
            <summary>
              Gets or sets the message generator to be used for all validations that do not otherwise specify a message generator.
            </summary>
            <value> The current. </value>
        </member>
        <member name="M:Its.Validation.MessageGenerator.Detokenize(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
              Detokenizes the specified message template, filling in bracketed strings with parameters.
            </summary>
            <param name="messageTemplate"> The message template. </param>
            <param name="parameters"> The parameters to fill into the template. </param>
            <returns> A string with the tokens replaced with values from the supplied dictionary. </returns>
            <remarks>
              The tokens should be surrouned by single curly braces, e.g. "The password must contain only the characters {allowed-characters}."
            </remarks>
        </member>
        <member name="T:Its.Validation.IValidationMessageGenerator">
            <summary>
              Builds messages describing <see cref="T:Its.Validation.RuleEvaluation" /> s.
            </summary>
        </member>
        <member name="M:Its.Validation.IValidationMessageGenerator.GetMessage(Its.Validation.RuleEvaluation)">
            <summary>
              Gets the message for the specified <see cref="T:Its.Validation.RuleEvaluation" /> .
            </summary>
            <returns> A validation failure message <see cref="T:System.String" /> . </returns>
        </member>
        <member name="T:Its.Validation.IValidationRule">
            <summary>
              Validates a target against a specified condition.
            </summary>
        </member>
        <member name="M:Its.Validation.IValidationRule.Result``1">
            <summary>
              Allows access to rule results.
            </summary>
            <typeparam name="T"> The type of the result </typeparam>
            <returns> An instance of the specified type <typeparamref name="T" /> , or null if it has not been defined on this rule or in this rule's <see
               cref="T:Its.Validation.ValidationScope" /> . </returns>
        </member>
        <member name="T:Its.Validation.IValidationRule`1">
            <summary>
              Validates a target object against a specified condition.
            </summary>
            <typeparam name="TTarget"> The <see cref="T:System.Type" /> that the IValidationRule validates. </typeparam>
        </member>
        <member name="M:Its.Validation.IValidationRule`1.Check(`0)">
            <summary>
              Determines whether the specified target is valid.
            </summary>
            <param name="target"> The object to be validated. </param>
            <returns> <c>true</c> if the specified target is valid; otherwise, <c>false</c> . </returns>
        </member>
        <member name="M:Its.Validation.IValidationRule`1.Check(`0,Its.Validation.ValidationScope)">
            <summary>
              Determines whether the specified target is valid.
            </summary>
            <param name="target"> The object to be validated. </param>
            <param name="scope"> The <see cref="T:Its.Validation.ValidationScope" /> in which to perform the validation. </param>
            <returns> <c>true</c> if the specified target is valid; otherwise, <c>false</c> . </returns>
        </member>
        <member name="T:Its.Validation.ParallelExtensions">
            <summary>
              Supports evaluating validation rules in parallel.
            </summary>
        </member>
        <member name="M:Its.Validation.ParallelExtensions.Parallel``1(System.Collections.Generic.IEnumerable{``0},Its.Validation.IValidationRule{``0})">
            <summary>
              Checks each item in a sequence against a validation rule in parallel.
            </summary>
            <typeparam name="T"> The type of the items to be validated. </typeparam>
            <param name="source"> The items to be validated. </param>
            <param name="rule"> The validation rule to check. </param>
            <returns> True if all items in the sequence are valid; otherwise, false. </returns>
        </member>
        <member name="M:Its.Validation.ParallelExtensions.Parallel``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
              Checks each item in a sequence against a validation rule in parallel.
            </summary>
            <typeparam name="T"> The type of the items to be validated. </typeparam>
            <param name="source"> The items to be validated. </param>
            <param name="validate"> A function that performs a validation against each item. </param>
            <returns> True if all items in the sequence are valid; otherwise, false. </returns>
        </member>
        <member name="T:Its.Validation.RuleEvaluatedEventArgs">
            <summary>
            Carries information about a rule evaluation.
            </summary>
        </member>
        <member name="M:Its.Validation.RuleEvaluatedEventArgs.#ctor(Its.Validation.RuleEvaluation)">
            <summary>
            Initializes a new instance of the <see cref="T:Its.Validation.RuleEvaluatedEventArgs"/> class.
            </summary>
            <param name="ruleEvaluation">The rule evaluation.</param>
        </member>
        <member name="P:Its.Validation.RuleEvaluatedEventArgs.RuleEvaluation">
            <summary>
            Gets the rule evaluation that triggered the event.
            </summary>
        </member>
        <member name="T:Its.Validation.RuleEvaluatedEventHandler">
            <summary>
            Represents the method that will handle a <see cref="E:Its.Validation.ValidationScope.RuleEvaluated" /> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Its.Validation.RuleEvaluatedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Its.Validation.RuleEvaluation">
            <summary>
              The result of a single evaluation of an object against a rule.
            </summary>
        </member>
        <member name="M:Its.Validation.RuleEvaluation.#ctor(System.Object,Its.Validation.IValidationRule,Its.Validation.IValidationMessageGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Its.Validation.FailedEvaluation" /> class.
            </summary>
            <param name="target"> The target. </param>
            <param name="rule"> The rule. </param>
            <param name="messageGenerator"> </param>
        </member>
        <member name="P:Its.Validation.RuleEvaluation.Parameters">
            <summary>
              Gets the parameters relevant to the rule evaluation.
            </summary>
        </member>
        <member name="P:Its.Validation.RuleEvaluation.Rule">
            <summary>
              Gets or sets the rule against which the validation check failed.
            </summary>
            <value> The rule against which the validation check failed. </value>
        </member>
        <member name="P:Its.Validation.RuleEvaluation.Target">
            <summary>
              Gets or sets the target of the validation check.
            </summary>
            <value> The target of the validation check. </value>
        </member>
        <member name="P:Its.Validation.RuleEvaluation.Message">
            <summary>
              Gets a message describing the validation failure.
            </summary>
            <value> A message describing the validation failure. </value>
        </member>
        <member name="P:Its.Validation.RuleEvaluation.MessageGenerator">
            <summary>
              Gets or sets the message generator.
            </summary>
            <value> The message generator. </value>
        </member>
        <member name="P:Its.Validation.RuleEvaluation.MessageTemplate">
            <summary>
              Gets the message template for the rule evaluation.
            </summary>
            <remarks>
              This template may contain tokens intended to be filled in with parameters collected during the rule evaluation.
            </remarks>
        </member>
        <member name="P:Its.Validation.RuleEvaluation.MemberPath">
            <summary>
              Gets the member path.
            </summary>
            <value> The member path. </value>
        </member>
        <member name="M:Its.Validation.RuleEvaluation.Result``1">
            <summary>
              Allows access to rule metadata.
            </summary>
            <typeparam name="T"> The type of the metadata </typeparam>
            <returns> An instance of the specified type <typeparamref name="T" /> , or null if it has not been defined on this rule or in this rules <see
               cref="T:Its.Validation.ValidationScope" /> . </returns>
        </member>
        <member name="M:Its.Validation.RuleEvaluation.ToString">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns> A <see cref="T:System.String" /> that represents this instance. </returns>
        </member>
        <member name="T:Its.Validation.TaskExtensions">
            <summary>
              Supports asynchronous rule evaluation.
            </summary>
        </member>
        <member name="M:Its.Validation.TaskExtensions.ExecuteAsync``1(Its.Validation.ValidationPlan{``0},``0)">
            <summary>
              Starts a validation asynchronously and returns a Task for the operation.
            </summary>
            <typeparam name="TTarget"> The type of the object to validate. </typeparam>
            <param name="plan"> The validation plan to execute asynchronously. </param>
            <param name="target"> The type of the object to validate. </param>
            <returns> </returns>
        </member>
        <member name="T:Its.Validation.FailedEvaluation">
            <summary>
              Describes a validation failure.
            </summary>
        </member>
        <member name="M:Its.Validation.FailedEvaluation.#ctor(System.Object,Its.Validation.IValidationRule,Its.Validation.IValidationMessageGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Its.Validation.FailedEvaluation" /> class.
            </summary>
            <param name="target"> The target. </param>
            <param name="rule"> The rule. </param>
            <param name="messageGenerator"> The <see cref="T:Its.Validation.IValidationMessageGenerator" /> used to generate validation messages for this failure. </param>
        </member>
        <member name="P:Its.Validation.FailedEvaluation.ErrorCode">
            <summary>
              Gets or sets the error code.
            </summary>
            <value> The error code. </value>
        </member>
        <member name="P:Its.Validation.FailedEvaluation.MessageTemplate">
            <summary>
              Gets the message template for the rule evaluation.
            </summary>
            <remarks>
              This template may contain tokens intended to be filled in with parameters collected during the rule evaluation.
            </remarks>
        </member>
        <member name="T:Its.Validation.ValidationPlan`1">
            <summary>
              The validation plan.
            </summary>
            <typeparam name="TTarget"> The <see cref="T:System.Type" /> that the ValidationPlan validates. </typeparam>
        </member>
        <member name="F:Its.Validation.ValidationPlan`1.rules">
            <summary>
              The rules.
            </summary>
        </member>
        <member name="M:Its.Validation.ValidationPlan`1.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Its.Validation.ValidationPlan`1" /> class.
            </summary>
        </member>
        <member name="M:Its.Validation.ValidationPlan`1.#ctor(Its.Validation.IValidationMessageGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Its.Validation.ValidationPlan`1" /> class.
            </summary>
            <param name="messageGenerator"> The message generator. </param>
        </member>
        <member name="M:Its.Validation.ValidationPlan`1.#ctor(Its.Validation.IValidationRule{`0}[])">
            <summary>
              Initializes a new instance of the <see cref="T:Its.Validation.ValidationPlan`1" /> class.
            </summary>
            <param name="validationRules"> The validation rules. </param>
        </member>
        <member name="M:Its.Validation.ValidationPlan`1.#ctor(Its.Validation.ValidationPlan{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Its.Validation.ValidationPlan`1" /> class.
            </summary>
        </member>
        <member name="M:Its.Validation.ValidationPlan`1.AddRule(Its.Validation.IValidationRule{`0})">
            <summary>
              Adds a rule to the validation plan.
            </summary>
            <param name="rule"> The rule to add. </param>
        </member>
        <member name="M:Its.Validation.ValidationPlan`1.AddRule(System.Func{`0,System.Boolean},System.Func{Its.Validation.ValidationRule{`0},Its.Validation.ValidationRule{`0}})">
            <summary>
              Adds a rule to the validation plan.
            </summary>
            <param name="rule"> The rule to add. </param>
            <param name="setup"> A function that further sets up the added rule. </param>
            <returns> </returns>
        </member>
        <member name="M:Its.Validation.ValidationPlan`1.Add(Its.Validation.IValidationRule{`0})">
            <summary>
              Adds the specified rule.
            </summary>
            <param name="rule"> The rule. </param>
            <returns> The rule </returns>
            <remarks>
              This method is equivalent to <see cref="M:Its.Validation.ValidationPlan`1.Add(Its.Validation.IValidationRule{`0})" /> . It is included to provide support for collection initializer syntax.
            </remarks>
        </member>
        <member name="M:Its.Validation.ValidationPlan`1.Remove(Its.Validation.IValidationRule{`0})">
            <summary>
              Removes a rule to the validation plan.
            </summary>
            <param name="rule"> The rule to be removed.</param>
        </member>
        <member name="M:Its.Validation.ValidationPlan`1.Execute(`0,System.Boolean)">
            <summary>
              Evaluates all constituent validation rules against the specified target.
            </summary>
            <param name="target"> The target. </param>
            <param name="haltOnFirstFailure"> When true, stops execution on the first failed rule </param>
            <returns> </returns>
        </member>
        <member name="M:Its.Validation.ValidationPlan`1.AllRules">
            <summary>
              Iterates all rules in order of dependency.
            </summary>
        </member>
        <member name="M:Its.Validation.ValidationPlan`1.ToString">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns> A <see cref="T:System.String" /> that represents this instance. </returns>
        </member>
        <member name="M:Its.Validation.ValidationPlan`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns> An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection. </returns>
        </member>
        <member name="M:Its.Validation.ValidationPlan`1.System#Collections#Generic#IEnumerable{Its#Validation#IValidationRule{TTarget}}#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns> A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection. </returns>
        </member>
        <member name="T:Its.Validation.ValidationReport">
            <summary>
              Holds information about the results of a set of validation rule evaluations.
            </summary>
        </member>
        <member name="M:Its.Validation.ValidationReport.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Its.Validation.ValidationReport" /> class.
            </summary>
        </member>
        <member name="M:Its.Validation.ValidationReport.#ctor(System.Collections.Generic.IEnumerable{Its.Validation.RuleEvaluation})">
            <summary>
              Initializes a new instance of the <see cref="T:Its.Validation.ValidationReport" /> class.
            </summary>
            <param name="evaluations"> The rule evaluations to be included in the report. </param>
        </member>
        <member name="P:Its.Validation.ValidationReport.Evaluations">
            <summary>
              Gets all of the <see cref="T:Its.Validation.RuleEvaluation" /> s that were executed.
            </summary>
        </member>
        <member name="P:Its.Validation.ValidationReport.Successes">
            <summary>
              Gets the <see cref="T:Its.Validation.SuccessfulEvaluation" /> s.
            </summary>
        </member>
        <member name="P:Its.Validation.ValidationReport.Failures">
            <summary>
              Gets the <see cref="T:Its.Validation.FailedEvaluation" /> s.
            </summary>
        </member>
        <member name="P:Its.Validation.ValidationReport.RulesExecuted">
            <summary>
              Gets the rules that were executed in the creation of the report.
            </summary>
        </member>
        <member name="P:Its.Validation.ValidationReport.HasFailures">
            <summary>
              Gets a value indicating whether the report contains any failed evaluations.
            </summary>
            <value> <c>true</c> if this instance has failures; otherwise, <c>false</c> . </value>
        </member>
        <member name="M:Its.Validation.ValidationReport.ToString">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns> A <see cref="T:System.String" /> that represents this instance. </returns>
        </member>
        <member name="T:Its.Validation.ValidationRule`1">
            <summary>
              Validates a target object against a specified condition.
            </summary>
            <typeparam name="TTarget"> The <see cref="T:System.Type" /> that the IValidationRule validates. </typeparam>
        </member>
        <member name="M:Its.Validation.ValidationRule`1.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Its.Validation.ValidationRule`1" /> class.
            </summary>
        </member>
        <member name="M:Its.Validation.ValidationRule`1.#ctor(System.Func{`0,System.Boolean})">
            <summary>
              Initializes a new instance of the <see cref="T:Its.Validation.ValidationRule`1" /> class.
            </summary>
            <param name="condition"> The condition. </param>
        </member>
        <member name="M:Its.Validation.ValidationRule`1.#ctor(Its.Validation.ValidationRule{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Its.Validation.ValidationRule`1" /> class.
            </summary>
            <param name="fromRule"> The rule upon which the new rule wil be based. </param>
            <remarks>
              This is used to clone a rule.
            </remarks>
        </member>
        <member name="P:Its.Validation.ValidationRule`1.MessageGenerator">
            <summary>
              Gets or sets the <see cref="T:Its.Validation.IValidationMessageGenerator" /> to be used to create messages for this rule.
            </summary>
        </member>
        <member name="M:Its.Validation.ValidationRule`1.Check(`0)">
            <summary>
              Determines whether the specified target is valid.
            </summary>
            <param name="target"> The target. </param>
            <returns> <c>true</c> if the specified target is valid; otherwise, <c>false</c> . </returns>
        </member>
        <member name="M:Its.Validation.ValidationRule`1.Check(`0,Its.Validation.ValidationScope)">
            <summary>
              Determines whether the specified target is valid.
            </summary>
            <param name="target"> The target. </param>
            <param name="scope"> The ValidationScope for the operation. </param>
            <returns> <c>true</c> if the specified target is valid; otherwise, <c>false</c> . </returns>
        </member>
        <member name="M:Its.Validation.ValidationRule`1.PerformCheck(`0,Its.Validation.ValidationScope)">
            <summary>
              Performs the actual rule check.
            </summary>
        </member>
        <member name="M:Its.Validation.ValidationRule`1.ToString">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns> A <see cref="T:System.String" /> that represents this instance. </returns>
        </member>
        <member name="T:Its.Validation.ValidationScope">
            <summary>
              Defines a unit of work for a validation or set of validations.
            </summary>
        </member>
        <member name="E:Its.Validation.ValidationScope.RuleEvaluated">
            <summary>
              Occurs when a rule evaluated on the scope or in one of its child scopes.
            </summary>
        </member>
        <member name="F:Its.Validation.ValidationScope.parent">
            <summary>
              The parent scope of the current scope.
            </summary>
        </member>
        <member name="F:Its.Validation.ValidationScope.evaluations">
            <summary>
              The rules executed.
            </summary>
        </member>
        <member name="F:Its.Validation.ValidationScope.parameters">
            <summary>
              The parameters.
            </summary>
        </member>
        <member name="F:Its.Validation.ValidationScope.activeScopes">
            <summary>
              A stack containing the active scopes in the order they were opened
            </summary>
        </member>
        <member name="M:Its.Validation.ValidationScope.#ctor(System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Its.Validation.ValidationScope" /> class.
            </summary>
        </member>
        <member name="M:Its.Validation.ValidationScope.#ctor(Its.Validation.ValidationScope)">
            <summary>
              Initializes a new instance of the <see cref="T:Its.Validation.ValidationScope" /> class.
            </summary>
            <param name="parent"> The parent. </param>
        </member>
        <member name="P:Its.Validation.ValidationScope.MessageGenerator">
            <summary>
              Gets or setsthe MessageGenerator to be used during the current validation execution.
            </summary>
        </member>
        <member name="P:Its.Validation.ValidationScope.ActiveScopes">
            <summary>
              Gets the active scopes.
            </summary>
            <value> The active scopes. </value>
        </member>
        <member name="P:Its.Validation.ValidationScope.Current">
            <summary>
              Gets Current.
            </summary>
        </member>
        <member name="M:Its.Validation.ValidationScope.EnterScope(Its.Validation.ValidationScope)">
            <summary>
              Enters the specified <paramref name="scope" /> .
            </summary>
            <param name="scope"> The scope. </param>
        </member>
        <member name="M:Its.Validation.ValidationScope.ExitScope(Its.Validation.ValidationScope)">
            <summary>
              Exit the specified <paramref name="scope" /> .
            </summary>
            <remarks>
              If there are nested scopes within the specified <paramref name="scope" /> , those will be exited as well.
            </remarks>
            <param name="scope"> The scope to exit </param>
        </member>
        <member name="P:Its.Validation.ValidationScope.Evaluations">
            <summary>
              Gets the evaluations that have taken place in the current scope, including its child scopes.
            </summary>
        </member>
        <member name="P:Its.Validation.ValidationScope.Failures">
            <summary>
              Gets the <see cref="T:Its.Validation.FailedEvaluation" /> s collected within the current scope and all child scopes.
            </summary>
            <value> The <see cref="T:Its.Validation.FailedEvaluation" /> s resulting from the execution of all rules within the current validation operation. </value>
        </member>
        <member name="P:Its.Validation.ValidationScope.AllFailures">
            <summary>
              Gets all <see cref="T:Its.Validation.FailedEvaluation" /> s collected within the current scope and all child scopes, including those marked as internal.
            </summary>
        </member>
        <member name="P:Its.Validation.ValidationScope.Successes">
            <summary>
              Gets the <see cref="T:Its.Validation.SuccessfulEvaluation" /> s collected within the current scope and all child scopes.
            </summary>
        </member>
        <member name="M:Its.Validation.ValidationScope.Dispose">
            <summary>
              The dispose.
            </summary>
        </member>
        <member name="M:Its.Validation.ValidationScope.FlushParameters">
            <summary>
              The flush parameters.
            </summary>
        </member>
        <member name="T:Its.Validation.SuccessfulEvaluation">
            <summary>
              The result of a rule that passed.
            </summary>
        </member>
        <member name="M:Its.Validation.SuccessfulEvaluation.#ctor(System.Object,Its.Validation.IValidationRule,Its.Validation.IValidationMessageGenerator)">
            <summary>
              Initializes a new instance of the <see cref="T:Its.Validation.SuccessfulEvaluation" /> class.
            </summary>
            <param name="target"> The target. </param>
            <param name="rule"> The rule. </param>
            <param name="messageGenerator"> </param>
        </member>
        <member name="P:Its.Validation.SuccessfulEvaluation.MessageTemplate">
            <summary>
              Gets the message template for the rule evaluation.
            </summary>
            <remarks>
              This template may contain tokens intended to be filled in with parameters collected during the rule evaluation.
            </remarks>
        </member>
    </members>
</doc>
