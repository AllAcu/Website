<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Its.Domain.Sql</name>
    </assembly>
    <members>
        <member name="T:Its.Log.Lite.Log">
            <summary>
            Writes messages to trace output or to Its.Log via the Its.Log TraceListener, if it is in use. 
            </summary>
        </member>
        <member name="M:Its.Log.Lite.Log.Write``1(System.Func{``0},System.String)">
            <summary>
                Writes the specified object to the log.
            </summary>
            <param name="getSubject">A function that returns the object to be written.</param>
            <param name="comment">A comment to provide context to the log entry.</param>
        </member>
        <member name="M:Its.Log.Lite.Log.Enter``1(System.Func{``0})">
            <summary>
                Indicates to the log that execution is entering a region.
            </summary>
            <typeparam name="T">
                The <see cref="T:System.Type"/> of the anonymous type of <paramref name="getSubject"/> used to enclose parameters to be logged at this boundary.
            </typeparam>
            <param name="getSubject">An anonymous type enclosing parameters to be logged.</param>
            <returns>
                An <see cref="T:System.IDisposable"/> that, when disposed, writes out the closing log entry, including the updated state of the return value of <paramref name="getSubject"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
                Adds a key/value pair to the dictionary if the key does not already exist.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key.</param>
            <returns>
                The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value for the key as returned by valueFactory if the key was not in the dictionary.
            </returns>
            <exception cref="T:System.ArgumentNullException">dictionary</exception>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.Merge``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Boolean,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Merges two dictionaries into a new dictionary.
            </summary>
            <typeparam name="TKey"> The type of the key. </typeparam>
            <typeparam name="TValue"> The type of the value. </typeparam>
            <param name="dictionary1"> The first dictionary from which to merge. </param>
            <param name="dictionary2"> The second dictionary from which to merge. </param>
            <param name="replace">
                if set to <c>true</c> , replace values in dictionary1 with values in dictionary2 for keys that are present in both dictionaries; otherwise, values in dictionary1 are preserved.
            </param>
            <param name="comparer"> The key comparer. </param>
            <returns> A new dictionary containing the merged values from both source dictionaries. </returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Attempts to add the specified key and value to the dictionary.
            </summary>
            <typeparam name="TKey"> The type of the key. </typeparam>
            <typeparam name="TValue"> The type of the value. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="key"> The key of the element to add. </param>
            <param name="value"> The value of the element to add. The value can be a null reference for reference types. </param>
            <returns> true if the key/value pair was added to the dictionary successfully. If the key already exists, this method returns false. </returns>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.AppLock">
            <summary>
            Represents sole access to the read model database for the purpose of updating read models.
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.AppLock.#ctor(Microsoft.Its.Domain.Sql.EventStoreDbContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Its.Domain.Sql.AppLock"/> class.
            </summary>
            <param name="db">The database.</param>
            <param name="lockResourceName">The lock resource.</param>
        </member>
        <member name="P:Microsoft.Its.Domain.Sql.AppLock.IsAcquired">
            <summary>
            Gets a value indicating whether a lock is acquired.
            </summary>
            <value>
              <c>true</c> if [is acquired]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Its.Domain.Sql.CommandScheduler.CommandSchedulingEventHandler.Activity">
            <summary>
            An observable of scheduler activity, which is updated each time a command is applied, whether successful or not.
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.CommandScheduler.ISchedulerClockRepository.AssociateWithClock(System.String,System.String)">
            <summary>
            Associates an arbitrary lookup string with a named clock.
            </summary>
            <param name="clockName">The name of the clock.</param>
            <param name="lookup">The lookup.</param>
            <exception cref="T:System.ArgumentNullException">
            clockName
            or
            lookup
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the lookup us alreayd associated with another clock.</exception>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.CommandScheduler.ISchedulerClockRepository.CreateClock(System.String,System.DateTimeOffset)">
            <summary>
            Creates a clock.
            </summary>
            <param name="clockName">The name of the clock.</param>
            <param name="startTime">The initial time to which the clock is set.</param>
            <exception cref="T:System.ArgumentNullException">clockName</exception>
            <exception cref="T:Microsoft.Its.Domain.ConcurrencyException">Thrown if a clock with the specified name already exists.</exception>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.CommandScheduler.ISchedulerClockTrigger.AdvanceClock(System.String,System.TimeSpan,System.Func{System.Linq.IQueryable{Microsoft.Its.Domain.Sql.CommandScheduler.ScheduledCommand},System.Linq.IQueryable{Microsoft.Its.Domain.Sql.CommandScheduler.ScheduledCommand}})">
            <summary>
            Advances the clock by a specified amount and triggers any commands that are due by the end of that time period.
            </summary>
            <param name="clockName">Name of the clock.</param>
            <param name="by">The timespan by which to advance the clock.</param>
            <param name="query">A query that can be used to filter the commands to be applied.</param>
            <returns>
            A result summarizing the triggered commands.
            </returns>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.CommandScheduler.ISchedulerClockTrigger.AdvanceClock(System.String,System.DateTimeOffset,System.Func{System.Linq.IQueryable{Microsoft.Its.Domain.Sql.CommandScheduler.ScheduledCommand},System.Linq.IQueryable{Microsoft.Its.Domain.Sql.CommandScheduler.ScheduledCommand}})">
            <summary>
            Advances the clock to a specified time and triggers any commands that are due by that time.
            </summary>
            <param name="clockName">Name of the clock.</param>
            <param name="to">The time to which to advance the clock.</param>
            <param name="query">A query that can be used to filter the commands to be applied.</param>
            <returns>
            A result summarizing the triggered commands.
            </returns>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.CommandScheduler.ISchedulerClockTrigger.Trigger(System.Func{System.Linq.IQueryable{Microsoft.Its.Domain.Sql.CommandScheduler.ScheduledCommand},System.Linq.IQueryable{Microsoft.Its.Domain.Sql.CommandScheduler.ScheduledCommand}})">
            <summary>
            Triggers all commands matched by the specified query.
            </summary>
            <param name="query">The query.</param>
            <returns>
            A result summarizing the triggered commands.
            </returns>
            <exception cref="T:System.ArgumentNullException">query</exception>
            <remarks>If the query matches commands that have been successfully applied already or abandoned, they will be re-applied.</remarks>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.CommandScheduler.ISchedulerClockTrigger.Trigger(Microsoft.Its.Domain.Sql.CommandScheduler.ScheduledCommand,Microsoft.Its.Domain.Sql.CommandScheduler.SchedulerAdvancedResult,Microsoft.Its.Domain.Sql.CommandScheduler.CommandSchedulerDbContext)">
            <summary>
            Triggers a specific scheduled command.
            </summary>
            <param name="scheduled">The scheduled command.</param>
            <param name="result">The result of the trigger operation.</param>
            <param name="db">The command scheduler database context.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Its.Domain.Sql.CommandScheduler.SchedulerAdvancedResult.FailedCommands">
            <summary>
            Gets a summary of the commands that were applied and failed when the scheduler was triggered.
            </summary>
        </member>
        <member name="P:Microsoft.Its.Domain.Sql.CommandScheduler.SchedulerAdvancedResult.SuccessfulCommands">
            <summary>
            Gets a summary of the commands that were successfully applied when the scheduler was triggered.
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.CommandScheduler.CommandSchedulerDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Its.Domain.Sql.CommandScheduler.CommandSchedulerDbContext"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.CommandScheduler.CommandSchedulerDbContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Its.Domain.Sql.CommandScheduler.CommandSchedulerDbContext"/> class.
            </summary>
            <param name="nameOrConnectionString">Either the database name or a connection string.</param>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.CommandScheduler.SchedulerClockRepository.AssociateWithClock(System.String,System.String)">
            <summary>
            Associates an arbitrary lookup string with a named clock.
            </summary>
            <param name="clockName">The name of the clock.</param>
            <param name="lookup">The lookup.</param>
            <exception cref="T:System.ArgumentNullException">
            clockName
            or
            lookup
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the lookup us alreayd associated with another clock.</exception>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.CommandScheduler.SchedulerClockRepository.CreateClock(System.String,System.DateTimeOffset)">
            <summary>
            Creates a clock.
            </summary>
            <param name="clockName">The name of the clock.</param>
            <param name="startTime">The initial time to which the clock is set.</param>
            <exception cref="T:System.ArgumentNullException">clockName</exception>
            <exception cref="T:Microsoft.Its.Domain.ConcurrencyException">Thrown if a clock with the specified name already exists.</exception>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.CommandScheduler.SchedulerClockTrigger.AdvanceClock(System.String,System.TimeSpan,System.Func{System.Linq.IQueryable{Microsoft.Its.Domain.Sql.CommandScheduler.ScheduledCommand},System.Linq.IQueryable{Microsoft.Its.Domain.Sql.CommandScheduler.ScheduledCommand}})">
            <summary>
            Advances the clock by a specified amount and triggers any commands that are due by the end of that time period.
            </summary>
            <param name="clockName">Name of the clock.</param>
            <param name="by">The timespan by which to advance the clock.</param>
            <param name="query">A query that can be used to filter the commands to be applied.</param>
            <returns>
            A result summarizing the triggered commands.
            </returns>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.CommandScheduler.SchedulerClockTrigger.AdvanceClock(System.String,System.DateTimeOffset,System.Func{System.Linq.IQueryable{Microsoft.Its.Domain.Sql.CommandScheduler.ScheduledCommand},System.Linq.IQueryable{Microsoft.Its.Domain.Sql.CommandScheduler.ScheduledCommand}})">
            <summary>
            Advances the clock to a specified time and triggers any commands that are due by that time.
            </summary>
            <param name="clockName">Name of the clock.</param>
            <param name="to">The time to which to advance the clock.</param>
            <param name="query">A query that can be used to filter the commands to be applied.</param>
            <returns>
            A result summarizing the triggered commands.
            </returns>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.CommandScheduler.SchedulerClockTrigger.Trigger(System.Func{System.Linq.IQueryable{Microsoft.Its.Domain.Sql.CommandScheduler.ScheduledCommand},System.Linq.IQueryable{Microsoft.Its.Domain.Sql.CommandScheduler.ScheduledCommand}})">
            <summary>
            Triggers all commands matched by the specified query.
            </summary>
            <param name="query">The query.</param>
            <returns>
            A result summarizing the triggered commands.
            </returns>
            <exception cref="T:System.ArgumentNullException">query</exception>
            <remarks>If the query matches commands that have been successfully applied already or abandoned, they will be re-applied.</remarks>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.CommandScheduler.SqlCommandSchedulerExtensions.Due(System.Linq.IQueryable{Microsoft.Its.Domain.Sql.CommandScheduler.ScheduledCommand},System.Nullable{System.DateTimeOffset})">
            <summary>
            Gets a query that will return scheduled commands from the command scheduler database that are due as of the specified time.
            </summary>
            <param name="query">A queryable for commands from the command scheduler database.</param>
            <param name="asOf">The time by which queried commands should be due.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.CommandScheduler.SqlCommandSchedulerExtensions.ToScheduledCommand``1(Microsoft.Its.Domain.Sql.CommandScheduler.ScheduledCommand)">
            <summary>
            Deserializes a scheduled command from the database model to the domain model.
            </summary>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.CommandScheduler.SqlCommandScheduler">
            <summary>
                Schedules commands durably via a SQL backing store for immediate or future application.
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.CommandScheduler.SqlCommandScheduler.#ctor(Microsoft.Its.Domain.Configuration,System.Func{Microsoft.Its.Domain.Sql.CommandScheduler.CommandSchedulerDbContext},Microsoft.Its.Domain.Sql.CommandScheduler.GetClockName)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.Its.Domain.Sql.CommandScheduler.SqlCommandScheduler"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.CommandScheduler.SqlCommandScheduler.ClockName(Microsoft.Its.Domain.IScheduledCommand)">
            <summary>
            Provides a method so that delegates can point to the always-up-to-date GetClockName implementation, rather than capture a prior version of the delegate.
            </summary>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.ConfigurationExtensions">
            <summary>
            Provides methods for preparing the domain configuration. 
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.ConfigurationExtensions.UseSqlEventStore(Microsoft.Its.Domain.Configuration,System.Func{Microsoft.Its.Domain.Sql.EventStoreDbContext})">
            <summary>
            Configures the system to use a SQL-based event store.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="createEventStoreDbContext">A function that returns an <see cref="T:Microsoft.Its.Domain.Sql.EventStoreDbContext"/>, if something different from the default is desired.</param>
            <returns>The updated configuration.</returns>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.ConfigurationExtensions.UseSqlCommandScheduling(Microsoft.Its.Domain.Configuration,System.Action{Microsoft.Its.Domain.Sql.ReadModelCatchup{Microsoft.Its.Domain.Sql.CommandScheduler.CommandSchedulerDbContext}})">
            <summary>
            Configures the system to use SQL-backed command scheduling.
            </summary>
            <param name="configuration">The configuration.</param>
            <returns>The updated configuration.</returns>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.EventBusExtensions.ReportErrorsToDatabase(Microsoft.Its.Domain.IEventBus,System.Func{System.Data.Entity.DbContext})">
            <summary>
            Reports event handling errors via the specified database.
            </summary>
            <param name="bus">The bus.</param>
            <param name="db">The database.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.ExclusiveEventStoreCatchupQuery">
            <summary>
            Allows a single reader among distributed instances to query and iterate events from the event store in order of their id, ascending.
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.ExclusiveEventStoreCatchupQuery.#ctor(Microsoft.Its.Domain.Sql.EventStoreDbContext,System.String,System.Func{System.Int64},Microsoft.Its.Domain.MatchEvent[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Its.Domain.Sql.ExclusiveEventStoreCatchupQuery"/> class.
            </summary>
            <param name="dbContext">The event store database context to execute the query against.</param>
            <param name="lockResourceName">Name of the lock. Multiple instances compete with other instances having the same <paramref name="lockResourceName"/>.</param>
            <param name="getStartAtId">The id of the first event to query.</param>
            <param name="matchEvents">Specifies the event types to include the query. If none are specified, all events are queried.</param>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.EventContractResolver">
            <summary>
            Helps deserialize domain events when the body does not contain certain properties, which are pulled from SQL table columns instead.
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.DbContextExtensions.CreateAzureDatabase(System.Data.Entity.DbContext,System.Int32,System.String,System.String)">
            <summary>
            Creates an Azure database.
            </summary>
            <param name="context">The DbContext</param>
            <param name="dbSizeInGB">Size of database in GB</param>
            <param name="edition">Edition of database</param>
            <param name="serviceObjective">Service objective of database</param>
            <exception cref="T:System.ArgumentException">Not Azure database based on ConnectionString</exception>
            <remarks>
            See https://msdn.microsoft.com/en-us/library/dn268335.aspx for more info.
            MAXSIZE = ( [ 100 MB | 500 MB ] | [ { 1 | 5 | 10 | 20 | 30 … 150…500 } GB  ] )
            | EDITION = { 'web' | 'business' | 'basic' | 'standard' | 'premium' }
            | SERVICE_OBJECTIVE = { 'shared' | 'basic' | 'S0' | 'S1' | 'S2' | 'P1' | 'P2' | 'P3' }
            </remarks>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.ReservationServiceDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Its.Domain.Sql.ReservationServiceDbContext"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.ReservationServiceDbContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Its.Domain.Sql.ReservationServiceDbContext"/> class.
            </summary>
            <param name="nameOrConnectionString">Either the database name or a connection string.</param>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.IEntityModelProjector">
            <summary>
            Indicates a projector whose responsibility is to create db context instances.
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.IEntityModelProjector.CreateDbContext">
            <summary>
            Creates a db context.
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.ProjectorExtensions.Update``1(``0)">
            <summary>
            Creates a unit of work for projection updates within an <see cref="T:Microsoft.Its.Domain.IUpdateProjectionWhen`1"/> implementation.
            </summary>
            <typeparam name="TProjector">The type of the projector.</typeparam>
            <param name="projector">The projector.</param>
            <returns>A <see cref="T:Microsoft.Its.Domain.UnitOfWork`1"/> containing an initialized <see cref="T:Microsoft.Its.Domain.Sql.ReadModelDbContext"/> and database transaction.</returns>
            <remarks>The DbContext can be accessed within the unit of work. If the database update operation is successful, the projector code should call VoteCommit or the transaction will be rolled back when the outermost <see cref="T:Microsoft.Its.Domain.UnitOfWork`1"/> is disposed.
            <c>
            using (var unitOfWork = this.Update())
            {
                var dbContext = unitOfWork.Resource&lt;ReadModelDbContext&gt;();
                
                // do work
            
                unitOfWork.VoteCommit();
            }
            </c>
            </remarks>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.QueryableExtensions">
            <summary>
            Provides methods for various types of event store queries. 
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.QueryableExtensions.RelatedEvents(System.Linq.IQueryable{Microsoft.Its.Domain.Sql.StorableEvent},System.Guid[])">
            <summary>
            Retrieves all events across all aggregates that are related to the specified aggregate ids, in the order in which they were recorded.
            </summary>
            <param name="events">The events.</param>
            <param name="relatedToAggregateIds">The aggregate ids to which the events relate.</param>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.Catchup.PollEventStore``1(Microsoft.Its.Domain.Sql.ReadModelCatchup{``0},System.Nullable{System.TimeSpan},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Polls the event store and passes events to <see cref="M:Microsoft.Its.Domain.Sql.ReadModelCatchup`1.Run"/> when new events are found.
            </summary>
            <typeparam name="TDbContext">The type of the database context used to access the read models.</typeparam>
            <param name="readModelCatchup">The read model catchup instance to run.</param>
            <param name="interval">The interval at which polling occurs.</param>
            <param name="scheduler">The scheduler on which work is scheduled.</param>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.Catchup.PollEventStore``1(Microsoft.Its.Domain.Sql.ReadModelCatchup{``0},System.IObservable{System.Reactive.Unit})">
            <summary>
            Polls the event store and passes events to <see cref="M:Microsoft.Its.Domain.Sql.ReadModelCatchup`1.Run"/> when new events are found.
            </summary>
            <typeparam name="TDbContext">The type of the database context used to access the read models.</typeparam>
            <param name="readModelCatchup">The read model catchup instance to run.</param>
            <param name="timer">An observable sequence that triggers event store polling.</param>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.Catchup.SingleBatchAsync``1(Microsoft.Its.Domain.Sql.ReadModelCatchup{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Runs or observes a single catchup batch asynchronously.
            </summary>
            <typeparam name="TDbContext">The type of the database context.</typeparam>
            <param name="catchup">The read model catchup.</param>
            <param name="scheduler">A scheduler on which to schedule the catchup run. If none is specified, the default scheduler is used.</param>
            <returns>An observable of the catchup batch's progress, whether it was triggered by the caller or was already running.</returns>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.Catchup.SingleBatchAsync(Microsoft.Its.Domain.Sql.ReadModelCatchup{Microsoft.Its.Domain.Sql.ReadModelDbContext}[])">
            <summary>
            Runs or observes a single catchup batch asynchronously for multiple catchup instances.
            </summary>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.ReadModelCatchupStatus">
            <summary>
            Provides information about the status of a read model catchup.
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.ReadModelCatchupStatus.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Microsoft.Its.Domain.Sql.ReadModelCatchupStatus.BatchCount">
            <summary>
            Gets or sets the count of events in the current batch.
            </summary>
        </member>
        <member name="P:Microsoft.Its.Domain.Sql.ReadModelCatchupStatus.CurrentEventId">
            <summary>
            Gets or sets the event identifier of the event currently being projected.
            </summary>
        </member>
        <member name="P:Microsoft.Its.Domain.Sql.ReadModelCatchupStatus.NumberOfEventsProcessed">
            <summary>
            Gets or sets the number of events processed in the current batch.
            </summary>
        </member>
        <member name="P:Microsoft.Its.Domain.Sql.ReadModelCatchupStatus.IsEndOfBatch">
            <summary>
            Gets a value indicating whether this status update represents the last event in a batch.
            </summary>
        </member>
        <member name="P:Microsoft.Its.Domain.Sql.ReadModelCatchupStatus.IsStartOfBatch">
            <summary>
            Gets a value indicating whether the status update indicates the start of a batch.
            </summary>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.ReadModelCatchup`1">
            <summary>
            Updates read models based on events after they have been added to an event store.
            </summary>
            <typeparam name="TDbContext">The type of the database context where read models are to be updated.</typeparam>
        </member>
        <member name="F:Microsoft.Its.Domain.Sql.ReadModelCatchup`1.CreateReadModelDbContext">
            <summary>
            Provides a method for specifying how <see cref="T:System.Data.Entity.DbContext"/> instances are created for use by instances of <see cref="T:Microsoft.Its.Domain.Sql.ReadModelCatchup`1"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Its.Domain.Sql.ReadModelCatchup`1.CreateEventStoreDbContext">
            <summary>
            Provides a method for specifying how the EventStoreDbContext instances are created for use by instance of <see cref="T:Microsoft.Its.Domain.Sql.ReadModelCatchup`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.ReadModelCatchup`1.#cctor">
            <summary>
            Initializes the <see cref="T:Microsoft.Its.Domain.Sql.ReadModelCatchup`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.ReadModelCatchup`1.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Its.Domain.Sql.ReadModelCatchup`1"/> class.
            </summary>
            <param name="projectors">The projectors to be updated as new events are added to the event store.</param>
            <exception cref="T:System.ArgumentException">You must specify at least one projector.</exception>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.ReadModelCatchup`1.Run">
            <summary>
            Runs a single catchup operation, which will catch up the subscribed projectors through the latest recorded event.
            </summary>
            <remarks>This method will return immediately without performing any updates if another catchup is currently in progress for the same read model database.</remarks>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.ReadModelCatchup`1.RunWhen(System.IObservable{System.Reactive.Unit})">
            <summary>
            Runs a single catchup operation each time the source observable produces a queryable of events.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.ReadModelCatchup`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Microsoft.Its.Domain.Sql.ReadModelCatchup`1.EventBus">
            <summary>
            Gets the event bus used to publish events to the subscribed projectors.
            </summary>
        </member>
        <member name="P:Microsoft.Its.Domain.Sql.ReadModelCatchup`1.EventHandlers">
            <summary>
            Gets the event handlers that the catchup is running
            </summary>
        </member>
        <member name="P:Microsoft.Its.Domain.Sql.ReadModelCatchup`1.Name">
            <summary>
            Gets or sets the name of the catchup. 
            </summary>
            <remarks>Catchups having the same name and updating the same database will not run in parallel. In order to have catchups that run in parallel for the same database, they should be given different names.</remarks>
        </member>
        <member name="P:Microsoft.Its.Domain.Sql.ReadModelCatchup`1.Progress">
            <summary>
            Gets an observable sequence showing the catchup's progress.
            </summary>
        </member>
        <member name="P:Microsoft.Its.Domain.Sql.ReadModelCatchup`1.StartAtEventId">
            <summary>
            Specifies the lowest id of the events to be caught up.
            </summary>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.IEntityModelConfiguration">
            <summary>
                Provides a unit of configuration for composed Entity Framework configurations.
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.IEntityModelConfiguration.ConfigureModel(System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar)">
            <summary>
                Configures the specified configuration registrar.
            </summary>
            <param name="configurationRegistrar">The configuration registrar.</param>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.ReadModelCatchup">
            <summary>
            Updates read models using <see cref="T:Microsoft.Its.Domain.Sql.ReadModelDbContext"/> based on events after they have been added to an event store.
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.ReadModelCatchup.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Its.Domain.Sql.ReadModelCatchup"/> class.
            </summary>
            <param name="projectors">The projectors to be updated as new events are added to the event store.</param>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.EventHandlingError">
            <summary>
            Provides information about an error that occurs while handling an event.
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.EventHandlingError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Its.Domain.Sql.EventHandlingError"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.ReadModelDbContext">
            <summary>
            A <see cref="T:System.Data.Entity.DbContext"/> that self-composes by discovering implementations of <see cref="T:Microsoft.Its.Domain.Sql.IEntityModelConfiguration"/>. 
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.ReadModelDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Its.Domain.Sql.ReadModelDbContext"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.ReadModelDbContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Its.Domain.Sql.ReadModelDbContext"/> class.
            </summary>
            <param name="nameOrConnectionString">Either the database name or a connection string.</param>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.ReadModelDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
            This method is called when the model for a derived context has been initialized, but
                            before the model has been locked down and used to initialize the context.  The default
                            implementation of this method does nothing, but it can be overridden in a derived class
                            such that the model can be further configured before it is locked down.
            </summary>
            <remarks>
            Typically, this method is called only once when the first instance of a derived context
                            is created.  The model for that context is then cached and is for all further instances of
                            the context in the app domain.  This caching can be disabled by setting the ModelCaching
                            property on the given ModelBuidler, but note that this can seriously degrade performance.
                            More control over caching is provided through use of the DbModelBuilder and DbContextFactory
                            classes directly.
            </remarks>
            <param name="modelBuilder">The builder that defines the model for the context being created.</param>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.EventExtensions.ToStorableEvent(Microsoft.Its.Domain.IEvent)">
            <summary>
            Creates a <see cref="T:Microsoft.Its.Domain.Sql.StorableEvent"/> based on the specified domain event.
            </summary>
            <param name="domainEvent">The domain event.</param>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.EventExtensions.ToStorableEvent``1(Microsoft.Its.Domain.IEvent{``0})">
            <summary>
            Creates a <see cref="T:Microsoft.Its.Domain.Sql.StorableEvent"/> based on the specified domain event.
            </summary>
            <param name="domainEvent">The domain event.</param>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.EventExtensions.ToDomainEvent(Microsoft.Its.Domain.Sql.StorableEvent)">
            <summary>
            Creates a domain event from a <see cref="T:Microsoft.Its.Domain.Sql.StorableEvent"/>.
            </summary>
            <param name="storableEvent">The storable event.</param>
            <returns>A deserialized domain event.</returns>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.EventStoreDbContext">
            <summary>
            Provides access to a SQL-based event store.
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.EventStoreDbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Its.Domain.Sql.EventStoreDbContext"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.EventStoreDbContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Its.Domain.Sql.EventStoreDbContext"/> class.
            </summary>
            <param name="nameOrConnectionString">Either the database name or a connection string.</param>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.EventStoreDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
            This method is called when the model for a derived context has been initialized, but
                            before the model has been locked down and used to initialize the context.  The default
                            implementation of this method does nothing, but it can be overridden in a derived class
                            such that the model can be further configured before it is locked down.
            </summary>
            <remarks>
            Typically, this method is called only once when the first instance of a derived context
                            is created.  The model for that context is then cached and is for all further instances of
                            the context in the app domain.  This caching can be disabled by setting the ModelCaching
                            property on the given ModelBuidler, but note that this can seriously degrade performance.
                            More control over caching is provided through use of the DbModelBuilder and DbContextFactory
                            classes directly.
            </remarks>
            <param name="modelBuilder">The builder that defines the model for the context being created.</param>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.ReadModelDatabaseInitializer`1">
            <summary>
            Initializes a read model database with a single catchup run if the database does not exist or its schema has changed.
            </summary>
            <typeparam name="TDbContext">The type of the db context.</typeparam>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.ReadModelDatabaseInitializer`1.Seed(`0)">
            <summary>
            A that should be overridden to actually add data to the context for seeding. 
                            The default implementation does nothing.
            </summary>
            <param name="context">The context to seed.</param>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.ReadModelUpdate">
            <summary>
            Represents a single atomic update to a read model database.
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.ReadModelUpdate.ConfigureUnitOfWork">
            <summary>
            Configures <see cref="T:Microsoft.Its.Domain.UnitOfWork`1"/> to provide DbContext sharing and database transactions.
            </summary>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.CommandScheduler.ScheduledCommand">
            <summary>
            A command that has been scheduled via the command scheduler.
            </summary>
        </member>
        <member name="P:Microsoft.Its.Domain.Sql.CommandScheduler.ScheduledCommand.AggregateId">
            <summary>
            Gets the id of the aggregate to which the command will be applied.
            </summary>
        </member>
        <member name="P:Microsoft.Its.Domain.Sql.CommandScheduler.ScheduledCommand.SequenceNumber">
            <summary>
            Gets the position of the event within the source object's event sequence.
            </summary>
        </member>
        <member name="P:Microsoft.Its.Domain.Sql.CommandScheduler.ScheduledCommand.DueTime">
            <summary>
            Gets the time at which the command is scheduled to be applied.
            </summary>
            <remarks>
            If this value is null, the command should be delivered as soon as possible.
            </remarks>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.SqlReservationService">
            <summary>
                A reservation service backed by a SQL store.
            </summary>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.StorableEvent">
            <summary>
            An event wrapper for writing events to a SQL databsae using Entity Framework.
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.StorableEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Its.Domain.Sql.StorableEvent.Body">
            <summary>
            Gets or sets the serialized body of the actual event.
            </summary>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.SqlEventSourcedRepository`1">
            <summary>
            Provides lookup and persistence for event sourced aggregates in a SQL database.
            </summary>
            <typeparam name="TAggregate">The type of the aggregate.</typeparam>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.SqlEventSourcedRepository`1.#ctor(Microsoft.Its.Domain.IEventBus,System.Func{Microsoft.Its.Domain.Sql.EventStoreDbContext})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Its.Domain.Sql.SqlEventSourcedRepository`1"/> class.
            </summary>
            <param name="bus">The bus.</param>
            <param name="createEventStoreDbContext">The create event store database context.</param>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.SqlEventSourcedRepository`1.GetLatest(System.Guid)">
            <summary>
                Finds and deserializes an aggregate the specified id, if any. If none exists, returns null.
            </summary>
            <param name="aggregateId">The id of the aggregate.</param>
            <returns>The deserialized aggregate, or null if none exists with the specified id.</returns>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.SqlEventSourcedRepository`1.GetVersion(System.Guid,System.Int64)">
            <summary>
                Finds and deserializes an aggregate the specified id, if any. If none exists, returns null.
            </summary>
            <param name="version">The version at which to retrieve the aggregate.</param>
            <param name="aggregateId">The id of the aggregate.</param>
            <returns>The deserialized aggregate, or null if none exists with the specified id.</returns>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.SqlEventSourcedRepository`1.GetAsOfDate(System.Guid,System.DateTimeOffset)">
            <summary>
            Finds and deserializes an aggregate the specified id, if any. If none exists, returns null.
            </summary>
            <param name="aggregateId">The id of the aggregate.</param>
            <param name="asOfDate">The date at which the aggregate should be sourced.</param>
            <returns>
            The deserialized aggregate, or null if none exists with the specified id.
            </returns>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.SqlEventSourcedRepository`1.Refresh(`0)">
            <summary>
            Refreshes an aggregate with the latest events from the event stream.
            </summary>
            <param name="aggregate">The aggregate to refresh.</param>
            <remarks>Events not present in the in-memory aggregate will not be re-fetched from the event store.</remarks>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.SqlEventSourcedRepository`1.Save(`0)">
            <summary>
                Persists the state of the specified aggregate by adding new events to the event store.
            </summary>
            <param name="aggregate">The aggregate to persist.</param>
            <exception cref="T:Microsoft.Its.Domain.ConcurrencyException"></exception>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.EventHandlingErrorEntityModelConfiguration">
            <summary>
            Configures the <see cref="T:Microsoft.Its.Domain.Sql.EventHandlingError"/> entity model. 
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.EventHandlingErrorEntityModelConfiguration.ConfigureModel(System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar)">
            <summary>
                Configures the specified configuration registrar.
            </summary>
            <param name="configurationRegistrar">The configuration registrar.</param>
        </member>
        <member name="T:Microsoft.Its.Domain.Sql.EventHandlingErrorEntityModelConfiguration.EventHandlingErrorEntityTypeConfiguration">
            <summary>
            Configures the <see cref="T:Microsoft.Its.Domain.Sql.EventHandlingError"/> entity model. 
            </summary>
        </member>
        <member name="M:Microsoft.Its.Domain.Sql.EventHandlingErrorEntityModelConfiguration.EventHandlingErrorEntityTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Its.Domain.Sql.EventHandlingErrorEntityModelConfiguration.EventHandlingErrorEntityTypeConfiguration"/> class.
            </summary>
        </member>
    </members>
</doc>
